    import time

import pyshark
import json
import re
import asyncio



class RCS_exp:

    def __init__(self, fileName):
        asyncio.set_event_loop(asyncio.new_event_loop())
        self.fileName = fileName
        self.capture = pyshark.FileCapture(fileName)
        self.dictionary = []
        self.packet_num = 0

    # Extracts Device Info
    def tokenize_OS_Model(self, OS_Model):
        # Dalvik/2.1.0 (Linux; U; Android 10; SM-G973F Build/QP1A.190711.020)
        # Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0
        token = OS_Model.split(";")
        finalStr = token[2] + token[3]
        return finalStr

    # Extract coordonates by using regex expressions
    # return - set of coordonates
    def parseCoords(self, chat):
        coord1 = "None"
        coord2 = "None"
        fullCoords = re.search("(?<=center=)(.*)(?=&zoom{1})", chat)
        if fullCoords is None:
            fullCoords = re.search("(?<=q=\()(.*)(?=\))", chat)
        if fullCoords is not None:
            t = fullCoords.span()
            spl = chat[t[0]:t[1]]
            strArr = spl.split(",")
            coord1 = strArr[0]
            coord2 = strArr[1]
        return coord1, coord2


    def removeParenthesis(self, string):
        new_str = ""
        for i in string:
            if i == "(" or i == ")":
                new_str += " "
            else:
                new_str += i
        return new_str

    # Writes all the information extracted by ProcessPacket function to a .json file
    def write_to_Json(self):
        # final = json.dumps(self.dictionary, indent=2)
        with open("sample.json", "w") as outfile:
            json.dump(self.dictionary, outfile, default=str, indent=2)


    # This function extracts informations from a package
    # [in] - package within a capture file
    def ProcessPacket(self, packet):
        try:
            packet_len = int(packet.length)
            source_address = 0
            destination_address = 0
            source_port = 0
            destination_port = 0
            time_stamp = packet.sniff_timestamp
            absolute_Time = packet.sniff_time
            coord1 = "None"
            coord2 = "None"
            OS_Model_Info = "None"
            for layer in packet:
                if layer.layer_name == "ip":
                    source_address = layer.src
                    destination_address = layer.dst
                elif layer.layer_name == "tcp":
                    source_port = layer.srcport
                    destination_port = layer.dstport
                elif layer.layer_name == "http":
                    coord1, coord2 = self.parseCoords(layer.chat)
                    try:
                        OS_Model_Info = self.tokenize_OS_Model(layer.user_agent)
                        OS_Model_Info = self.removeParenthesis(OS_Model_Info)
                    except AttributeError:
                        pass
                    try:
                        location = layer.location
                        coord1, coord2 = self.parseCoords(location)
                    except AttributeError:
                        pass

            dict = {
                "Packet_Num": self.packet_num,
                "Source_IP": source_address,
                "Destination_IP": destination_address,
                "Source_Port": source_port,
                "Destination_Port": destination_port,
                "Length": packet_len,
                "Time": absolute_Time,
                "Timestamp": time_stamp,
                "Coord1": coord1,
                "Coord2": coord2,
                "Device_Info" : OS_Model_Info
            }
            self.dictionary.append(dict)

        except Exception as e:
            pass


    # This function prints the packets within the capture in a .json file
    def printPackets(self):
        # Go through each packet
        for packet in self.capture:
            # We use only "TCP", forget about "UDP" and the rest
            if packet.transport_layer == "TCP":
                self.packet_num += 1
                self.ProcessPacket(packet)
        self.capture.close()
        self.write_to_Json()
